// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PathsUpdated extends ethereum.Event {
  get params(): PathsUpdated__Params {
    return new PathsUpdated__Params(this);
  }
}

export class PathsUpdated__Params {
  _event: PathsUpdated;

  constructor(event: PathsUpdated) {
    this._event = event;
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetBuyBackAddress extends ethereum.Event {
  get params(): SetBuyBackAddress__Params {
    return new SetBuyBackAddress__Params(this);
  }
}

export class SetBuyBackAddress__Params {
  _event: SetBuyBackAddress;

  constructor(event: SetBuyBackAddress) {
    this._event = event;
  }

  get _buyBackAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDiceModulus extends ethereum.Event {
  get params(): SetDiceModulus__Params {
    return new SetDiceModulus__Params(this);
  }
}

export class SetDiceModulus__Params {
  _event: SetDiceModulus;

  constructor(event: SetDiceModulus) {
    this._event = event;
  }

  get _diceModulus(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetIsEarnable extends ethereum.Event {
  get params(): SetIsEarnable__Params {
    return new SetIsEarnable__Params(this);
  }
}

export class SetIsEarnable__Params {
  _event: SetIsEarnable;

  constructor(event: SetIsEarnable) {
    this._event = event;
  }

  get _isEarnable(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetSettings extends ethereum.Event {
  get params(): SetSettings__Params {
    return new SetSettings__Params(this);
  }
}

export class SetSettings__Params {
  _event: SetSettings;

  constructor(event: SetSettings) {
    this._event = event;
  }

  get _withdrawFeeFactor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _buyBackRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _slippageFactor(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetUniRouterAddress extends ethereum.Event {
  get params(): SetUniRouterAddress__Params {
    return new SetUniRouterAddress__Params(this);
  }
}

export class SetUniRouterAddress__Params {
  _event: SetUniRouterAddress;

  constructor(event: SetUniRouterAddress) {
    this._event = event;
  }

  get _uniRouterAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetWethToAvaRouterAddress extends ethereum.Event {
  get params(): SetWethToAvaRouterAddress__Params {
    return new SetWethToAvaRouterAddress__Params(this);
  }
}

export class SetWethToAvaRouterAddress__Params {
  _event: SetWethToAvaRouterAddress;

  constructor(event: SetWethToAvaRouterAddress) {
    this._event = event;
  }

  get _wethToAvaRouterAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AVaultPCS extends ethereum.SmartContract {
  static bind(address: Address): AVaultPCS {
    return new AVaultPCS("AVaultPCS", address);
  }

  AVAAddress(): Address {
    let result = super.call("AVAAddress", "AVAAddress():(address)", []);

    return result[0].toAddress();
  }

  try_AVAAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("AVAAddress", "AVAAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyBackAddress(): Address {
    let result = super.call("buyBackAddress", "buyBackAddress():(address)", []);

    return result[0].toAddress();
  }

  try_buyBackAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "buyBackAddress",
      "buyBackAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  buyBackRate(): BigInt {
    let result = super.call("buyBackRate", "buyBackRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyBackRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyBackRate", "buyBackRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyBackRateMax(): BigInt {
    let result = super.call("buyBackRateMax", "buyBackRateMax():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyBackRateMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyBackRateMax",
      "buyBackRateMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyBackRateUL(): BigInt {
    let result = super.call("buyBackRateUL", "buyBackRateUL():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyBackRateUL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyBackRateUL",
      "buyBackRateUL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  diceModulus(): BigInt {
    let result = super.call("diceModulus", "diceModulus():(uint256)", []);

    return result[0].toBigInt();
  }

  try_diceModulus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("diceModulus", "diceModulus():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedAddress(): Address {
    let result = super.call("earnedAddress", "earnedAddress():(address)", []);

    return result[0].toAddress();
  }

  try_earnedAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "earnedAddress",
      "earnedAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  earnedToToken0Path(param0: BigInt): Address {
    let result = super.call(
      "earnedToToken0Path",
      "earnedToToken0Path(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_earnedToToken0Path(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "earnedToToken0Path",
      "earnedToToken0Path(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  earnedToToken1Path(param0: BigInt): Address {
    let result = super.call(
      "earnedToToken1Path",
      "earnedToToken1Path(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_earnedToToken1Path(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "earnedToToken1Path",
      "earnedToToken1Path(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  earnedToWethPath(param0: BigInt): Address {
    let result = super.call(
      "earnedToWethPath",
      "earnedToWethPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_earnedToWethPath(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "earnedToWethPath",
      "earnedToWethPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmContractAddress(): Address {
    let result = super.call(
      "farmContractAddress",
      "farmContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_farmContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "farmContractAddress",
      "farmContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCAKEStaking(): boolean {
    let result = super.call("isCAKEStaking", "isCAKEStaking():(bool)", []);

    return result[0].toBoolean();
  }

  try_isCAKEStaking(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCAKEStaking", "isCAKEStaking():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEarnable(): boolean {
    let result = super.call("isEarnable", "isEarnable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isEarnable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEarnable", "isEarnable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastEarnBlock(): BigInt {
    let result = super.call("lastEarnBlock", "lastEarnBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastEarnBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastEarnBlock",
      "lastEarnBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pid(): BigInt {
    let result = super.call("pid", "pid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pid", "pid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slippageFactor(): BigInt {
    let result = super.call("slippageFactor", "slippageFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slippageFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slippageFactor",
      "slippageFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slippageFactorUL(): BigInt {
    let result = super.call(
      "slippageFactorUL",
      "slippageFactorUL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_slippageFactorUL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slippageFactorUL",
      "slippageFactorUL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0Address(): Address {
    let result = super.call("token0Address", "token0Address():(address)", []);

    return result[0].toAddress();
  }

  try_token0Address(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "token0Address",
      "token0Address():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token0ToEarnedPath(param0: BigInt): Address {
    let result = super.call(
      "token0ToEarnedPath",
      "token0ToEarnedPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_token0ToEarnedPath(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "token0ToEarnedPath",
      "token0ToEarnedPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1Address(): Address {
    let result = super.call("token1Address", "token1Address():(address)", []);

    return result[0].toAddress();
  }

  try_token1Address(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "token1Address",
      "token1Address():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1ToEarnedPath(param0: BigInt): Address {
    let result = super.call(
      "token1ToEarnedPath",
      "token1ToEarnedPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_token1ToEarnedPath(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "token1ToEarnedPath",
      "token1ToEarnedPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniRouterAddress(): Address {
    let result = super.call(
      "uniRouterAddress",
      "uniRouterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniRouterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniRouterAddress",
      "uniRouterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wantAddress(): Address {
    let result = super.call("wantAddress", "wantAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wantAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("wantAddress", "wantAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wantLockedTotal(): BigInt {
    let result = super.call(
      "wantLockedTotal",
      "wantLockedTotal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_wantLockedTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wantLockedTotal",
      "wantLockedTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wethAddress(): Address {
    let result = super.call("wethAddress", "wethAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wethAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("wethAddress", "wethAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wethToAVAPath(param0: BigInt): Address {
    let result = super.call(
      "wethToAVAPath",
      "wethToAVAPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_wethToAVAPath(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wethToAVAPath",
      "wethToAVAPath(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wethToAvaRouterAddress(): Address {
    let result = super.call(
      "wethToAvaRouterAddress",
      "wethToAvaRouterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_wethToAvaRouterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wethToAvaRouterAddress",
      "wethToAvaRouterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawFeeFactor(): BigInt {
    let result = super.call(
      "withdrawFeeFactor",
      "withdrawFeeFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawFeeFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFeeFactor",
      "withdrawFeeFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFeeFactorLL(): BigInt {
    let result = super.call(
      "withdrawFeeFactorLL",
      "withdrawFeeFactorLL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawFeeFactorLL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFeeFactorLL",
      "withdrawFeeFactorLL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFeeFactorMax(): BigInt {
    let result = super.call(
      "withdrawFeeFactorMax",
      "withdrawFeeFactorMax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawFeeFactorMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFeeFactorMax",
      "withdrawFeeFactorMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _isCAKEStaking(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _earnedToWethPath(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _wethToAVAPath(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _earnedToToken0Path(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get _earnedToToken1Path(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }

  get _token0ToEarnedPath(): Array<Address> {
    return this._call.inputValues[7].value.toAddressArray();
  }

  get _token1ToEarnedPath(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }

  get _tokenName(): string {
    return this._call.inputValues[9].value.toString();
  }

  get _tokenSymbol(): string {
    return this._call.inputValues[10].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ConvertDustToEarnedCall extends ethereum.Call {
  get inputs(): ConvertDustToEarnedCall__Inputs {
    return new ConvertDustToEarnedCall__Inputs(this);
  }

  get outputs(): ConvertDustToEarnedCall__Outputs {
    return new ConvertDustToEarnedCall__Outputs(this);
  }
}

export class ConvertDustToEarnedCall__Inputs {
  _call: ConvertDustToEarnedCall;

  constructor(call: ConvertDustToEarnedCall) {
    this._call = call;
  }
}

export class ConvertDustToEarnedCall__Outputs {
  _call: ConvertDustToEarnedCall;

  constructor(call: ConvertDustToEarnedCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wantAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EarnCall extends ethereum.Call {
  get inputs(): EarnCall__Inputs {
    return new EarnCall__Inputs(this);
  }

  get outputs(): EarnCall__Outputs {
    return new EarnCall__Outputs(this);
  }
}

export class EarnCall__Inputs {
  _call: EarnCall;

  constructor(call: EarnCall) {
    this._call = call;
  }
}

export class EarnCall__Outputs {
  _call: EarnCall;

  constructor(call: EarnCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class FarmCall extends ethereum.Call {
  get inputs(): FarmCall__Inputs {
    return new FarmCall__Inputs(this);
  }

  get outputs(): FarmCall__Outputs {
    return new FarmCall__Outputs(this);
  }
}

export class FarmCall__Inputs {
  _call: FarmCall;

  constructor(call: FarmCall) {
    this._call = call;
  }
}

export class FarmCall__Outputs {
  _call: FarmCall;

  constructor(call: FarmCall) {
    this._call = call;
  }
}

export class InCaseTokensGetStuckCall extends ethereum.Call {
  get inputs(): InCaseTokensGetStuckCall__Inputs {
    return new InCaseTokensGetStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokensGetStuckCall__Outputs {
    return new InCaseTokensGetStuckCall__Outputs(this);
  }
}

export class InCaseTokensGetStuckCall__Inputs {
  _call: InCaseTokensGetStuckCall;

  constructor(call: InCaseTokensGetStuckCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InCaseTokensGetStuckCall__Outputs {
  _call: InCaseTokensGetStuckCall;

  constructor(call: InCaseTokensGetStuckCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBuyBackAddressCall extends ethereum.Call {
  get inputs(): SetBuyBackAddressCall__Inputs {
    return new SetBuyBackAddressCall__Inputs(this);
  }

  get outputs(): SetBuyBackAddressCall__Outputs {
    return new SetBuyBackAddressCall__Outputs(this);
  }
}

export class SetBuyBackAddressCall__Inputs {
  _call: SetBuyBackAddressCall;

  constructor(call: SetBuyBackAddressCall) {
    this._call = call;
  }

  get _buyBackAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBuyBackAddressCall__Outputs {
  _call: SetBuyBackAddressCall;

  constructor(call: SetBuyBackAddressCall) {
    this._call = call;
  }
}

export class SetDiceModulusCall extends ethereum.Call {
  get inputs(): SetDiceModulusCall__Inputs {
    return new SetDiceModulusCall__Inputs(this);
  }

  get outputs(): SetDiceModulusCall__Outputs {
    return new SetDiceModulusCall__Outputs(this);
  }
}

export class SetDiceModulusCall__Inputs {
  _call: SetDiceModulusCall;

  constructor(call: SetDiceModulusCall) {
    this._call = call;
  }

  get _diceModulus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDiceModulusCall__Outputs {
  _call: SetDiceModulusCall;

  constructor(call: SetDiceModulusCall) {
    this._call = call;
  }
}

export class SetIsEarnableCall extends ethereum.Call {
  get inputs(): SetIsEarnableCall__Inputs {
    return new SetIsEarnableCall__Inputs(this);
  }

  get outputs(): SetIsEarnableCall__Outputs {
    return new SetIsEarnableCall__Outputs(this);
  }
}

export class SetIsEarnableCall__Inputs {
  _call: SetIsEarnableCall;

  constructor(call: SetIsEarnableCall) {
    this._call = call;
  }

  get _isEarnable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsEarnableCall__Outputs {
  _call: SetIsEarnableCall;

  constructor(call: SetIsEarnableCall) {
    this._call = call;
  }
}

export class SetPathsCall extends ethereum.Call {
  get inputs(): SetPathsCall__Inputs {
    return new SetPathsCall__Inputs(this);
  }

  get outputs(): SetPathsCall__Outputs {
    return new SetPathsCall__Outputs(this);
  }
}

export class SetPathsCall__Inputs {
  _call: SetPathsCall;

  constructor(call: SetPathsCall) {
    this._call = call;
  }

  get _earnedToWethPath(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _wethToAVAPath(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _earnedToToken0Path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _earnedToToken1Path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _token0ToEarnedPath(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _token1ToEarnedPath(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }
}

export class SetPathsCall__Outputs {
  _call: SetPathsCall;

  constructor(call: SetPathsCall) {
    this._call = call;
  }
}

export class SetSettingsCall extends ethereum.Call {
  get inputs(): SetSettingsCall__Inputs {
    return new SetSettingsCall__Inputs(this);
  }

  get outputs(): SetSettingsCall__Outputs {
    return new SetSettingsCall__Outputs(this);
  }
}

export class SetSettingsCall__Inputs {
  _call: SetSettingsCall;

  constructor(call: SetSettingsCall) {
    this._call = call;
  }

  get _withdrawFeeFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyBackRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _slippageFactor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetSettingsCall__Outputs {
  _call: SetSettingsCall;

  constructor(call: SetSettingsCall) {
    this._call = call;
  }
}

export class SetUniRouterAddressCall extends ethereum.Call {
  get inputs(): SetUniRouterAddressCall__Inputs {
    return new SetUniRouterAddressCall__Inputs(this);
  }

  get outputs(): SetUniRouterAddressCall__Outputs {
    return new SetUniRouterAddressCall__Outputs(this);
  }
}

export class SetUniRouterAddressCall__Inputs {
  _call: SetUniRouterAddressCall;

  constructor(call: SetUniRouterAddressCall) {
    this._call = call;
  }

  get _uniRouterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUniRouterAddressCall__Outputs {
  _call: SetUniRouterAddressCall;

  constructor(call: SetUniRouterAddressCall) {
    this._call = call;
  }
}

export class SetWethToAvaRouterAddressCall extends ethereum.Call {
  get inputs(): SetWethToAvaRouterAddressCall__Inputs {
    return new SetWethToAvaRouterAddressCall__Inputs(this);
  }

  get outputs(): SetWethToAvaRouterAddressCall__Outputs {
    return new SetWethToAvaRouterAddressCall__Outputs(this);
  }
}

export class SetWethToAvaRouterAddressCall__Inputs {
  _call: SetWethToAvaRouterAddressCall;

  constructor(call: SetWethToAvaRouterAddressCall) {
    this._call = call;
  }

  get _wethToAvaRouterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWethToAvaRouterAddressCall__Outputs {
  _call: SetWethToAvaRouterAddressCall;

  constructor(call: SetWethToAvaRouterAddressCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shareAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WrapETHCall extends ethereum.Call {
  get inputs(): WrapETHCall__Inputs {
    return new WrapETHCall__Inputs(this);
  }

  get outputs(): WrapETHCall__Outputs {
    return new WrapETHCall__Outputs(this);
  }
}

export class WrapETHCall__Inputs {
  _call: WrapETHCall;

  constructor(call: WrapETHCall) {
    this._call = call;
  }
}

export class WrapETHCall__Outputs {
  _call: WrapETHCall;

  constructor(call: WrapETHCall) {
    this._call = call;
  }
}
